cmake_minimum_required(VERSION 3.16)
set(CMAKE_CXX_STANDARD 20)
project(Deadlock)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CRYPTOPP_LIB_DIR "vendor/cryptopp/x64/Output/Debug")
else()
    set(CRYPTOPP_LIB_DIR "vendor/cryptopp/x64/Output/Release")
    if(WIN32)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
    endif()
endif()

file(GLOB SOURCES "sources/*.cpp" "sources/*.h")
source_group("Source Files" FILES ${SOURCES})


file(GLOB WIDGETS "sources/Widgets/*.cpp" "sources/Widgets/*.h")
source_group("Source Files\\Widgets" FILES ${WIDGETS})

file(GLOB MESSAGE_FILES "sources/Message/*.cpp" "sources/Message/*.h")
source_group("Source Files\\Widgets\\Message" FILES ${MESSAGE_FILES})

file(GLOB PROFILE_FILES "sources/Profile/*.cpp" "sources/Profile/*.h")
source_group("Source Files\\Widgets\\Profile" FILES ${PROFILE_FILES})

file(GLOB AUTHORIZATION_FILES "sources/Authorization/*.cpp" "sources/Authorization/*.h")
source_group("Source Files\\Widgets\\Authorization" FILES ${AUTHORIZATION_FILES})



file(GLOB CORE_FILES "sources/Core/*.cpp" "sources/Core/*.h" "vendor/base_64/base64_my.h" "vendor/base_64/base64_my.cpp")
source_group("Source Files\\Core" FILES ${CORE_FILES})

file(GLOB_RECURSE NET_LIB "sources/Network/*.h" "sources/Network/*.cpp")
source_group("Source Files\\Network" FILES ${NET_LIB})

set(CMAKE_PREFIX_PATH "C:/Program Files/Qt/6.5.1")
find_package(Qt6 COMPONENTS Widgets REQUIRED)
qt_standard_project_setup()
set(CMAKE_AUTOMOC ON)

add_subdirectory("Deadlock_client_updater")

include_directories("sources" "sources/Widgets" "sources/Core" "sources/Network" "vendor" "vendor/base_64" "vendor/cryptopp" "vendor/json/include" "vendor/SQLiteCpp/include")
link_directories("vendor/sqlite" ${CRYPTOPP_LIB_DIR})

qt6_add_resources(QRC_FILES resources/resources.qrc)
set(RC_FILE resources/app_icon.rc)

add_executable(${PROJECT_NAME} ${SOURCES} ${AUTHORIZATION_FILES} ${MESSAGE_FILES} ${WIDGETS} ${CORE_FILES} ${QRC_FILES} ${PROFILE_FILES} ${NET_LIB} ${RC_FILE})
target_link_libraries(${PROJECT_NAME} Qt6::Widgets ws2_32 sqlite.lib cryptlib.lib)